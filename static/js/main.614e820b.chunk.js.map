{"version":3,"sources":["page1.tsx","page2.tsx","app.tsx","serviceWorker.js","index.tsx"],"names":["Page1","react","Link","to","React","Page2","App","BrowserRouter","basename","Switch","Route","path","component","Redirect","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAkEeA,mLA1DP,OACIC,EAAA,yBACIA,EAAA,cAACC,EAAA,EAAD,CAAMC,GAAG,WAAT,iBAJIC,aC0BLC,mLA1BP,OACIJ,EAAA,yBACIA,EAAA,cAACC,EAAA,EAAD,CAAMC,GAAG,WAAT,iBAJIC,aCeLE,mLAZP,OACIL,EAAA,cAACM,EAAA,EAAD,CAAQC,SAAS,qBACbP,EAAA,cAACQ,EAAA,EAAD,KACIR,EAAA,cAACS,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWZ,IAChCC,EAAA,cAACS,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWP,IAChCJ,EAAA,cAACY,EAAA,EAAD,CAAUV,GAAG,qBAPfC,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.614e820b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { User } from './lib/rx-react/user.obs'\nimport Bind from './lib/rx-react/bind.component'\nimport { Project } from './lib/rx-react/project.obs';\nimport { Link } from 'react-router-dom'\n\nclass Page1 extends React.Component<any, any> {\n    render() {\n        return (\n            <div>\n                <Link to='./Page2'>\n                    Page2\n                </Link>\n                {/* <Bind $={User}>\n                    {(err, data, instance) => {\n                        if (err && err.message !== 'user not found') {\n                            return <div style={{ background: 'red' }}>{err.message}</div>\n                        }\n                        const f = React.createRef<HTMLInputElement>()\n                        return <form onSubmit={\n                            (e) => {\n                                e.preventDefault()\n                                instance.shiftUser(f.current!.value)\n                            }\n                        }>\n                            <input type=\"text\" ref={f} placeholder=\"input some id to login, like: 1,2,3,4,5,6\" style={{ width: 300 }} />\n                        </form>\n                    }}\n                </Bind>\n\n                <Bind $={User}>\n                    {(err, data, instance) => {\n                        const error = err || data!.err\n                        if (error) {\n                            return <div style={{ background: 'red' }}>{error.message}</div>\n                        }\n                        if (data!.isLoading) {\n                            return <div>isLoading</div>\n                        }\n                        return <p>\n                            user_id: {data!.payload!.user_id}<br />\n                            user_name: {data!.payload!.user_name}\n                        </p>\n                    }}\n                </Bind>\n\n                <Bind $={Project}>\n                    {(err, data, instance) => {\n                        const error = err || data!.err\n                        if (error) {\n                            return <div style={{ background: 'red' }}>{error.message}</div>\n                        }\n                        if (data!.isLoading) {\n                            return <div>isLoading</div>\n                        }\n                        return <p>\n                            proj_id: {data!.payload!.proj_id}<br />\n                            proj_name: {data!.payload!.proj_name}\n                        </p>\n                    }}\n                </Bind> */}\n            </div>\n        );\n    }\n}\n\nexport default Page1;\n","import * as React from 'react';\nimport Bind from './lib/rx-react/bind.component'\nimport { Project } from './lib/rx-react/project.obs';\nimport { Link } from 'react-router-dom'\nclass Page2 extends React.Component<any, any> {\n    render() {\n        return (\n            <div>\n                <Link to='./Page1'>\n                    Page1\n                </Link>\n                {/* <Bind $={Project}>\n                    {(err, data, instance) => {\n                        const error = err || data!.err\n                        if (error) {\n                            return <div style={{ background: 'red' }}>{error.message}</div>\n                        }\n                        if (data!.isLoading) {\n                            return <div>isLoading</div>\n                        }\n                        return <p>\n                            proj_id: {data!.payload!.proj_id}<br />\n                            proj_name: {data!.payload!.proj_name}\n                        </p>\n                    }}\n                </Bind> */}\n            </div>\n\n        );\n    }\n}\n\nexport default Page2;\n","import * as React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\nimport Page1 from './page1';\nimport Page2 from './page2';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router basename=\"/rx_react_example\">\n                <Switch>\n                    <Route path=\"/Page1\" component={Page1} />\n                    <Route path=\"/Page2\" component={Page2} />\n                    <Redirect to=\"./Page1\" />\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\nimport 'rxjs'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}